将罗马字符的数字转换成整数
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
class Solution(object):
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        #先设置var num=0，用来返回最后的数字
        num = 0
        #设置str 变量prev，用来记录前位的罗马字符
        prev=""
        #字典把罗马字符和整数值一一对应
        d={'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}
        #依次遍历输入s中的每一个罗马字符
        for rs in s:
            #先看是否看输入是否是第一个字符，就是检查是否已经有过前位字符
            if len(prev)==0:
                #如果没有前位字符（第一位），就直接把当前的罗马字符对应的整数值加给num
                if rs in d:
                    num+= d[rs]
                    #同时把当前字符赋值给prev
                    prev=rs
            else:
                #如果已经有了前位字符，就看当前位的整数值是不是大于前位值，这里就是监测是否出现了四和九的情况
                if d[prev]<d[rs]:
                    #如果当前位比前位大，说明出现了四或九；因为前位已经被加给了num，所以要减去两个前位，再加上当前位得到四或九的完整加法
                    num += (-2)*d[prev]+d[rs]
                    #加完四或九后，把先位赋值给前位
                    prev=rs
                #只要现位不大于前位，就直接加现位，同时把现位赋值给前位
                else:
                    num+=d[rs]
                    prev=rs
        return num
