这题找出最长common prefix两种思路，一种就是直接按续依次比较所有元素的位数是否相等；另一种就是用二分法查找。
二分法必须作用于有序序列（如果一个list中所有的元素都有common prefix的话，也就是变相有了序列）。
class Solution(object):
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        #如果整个list长度直接为0，或者是list中有元素为空，那就直接返回“”，all（list）的用法就是判断一个可迭代目标（比如list）是否
        #所有元素都不为空，都不为空则返回True
        if len(strs)==0 or not all(strs):
            return ""
        else:
            #如果其他，则遍历第一个元素（其实我觉得先把list按元素长短从短到长排好比较好处理）的每一位
            for i in range(len(strs[0])):
                #赋值第一位给一个变量
                c = strs[0][i]
                #在对list中第一个元素的每一位进行遍历的同时，进行另一个遍历，遍历list中剩下的所有元素。
                for j in range (1, len(strs)):
                    #判断子遍历停止的条件：就是list中低J个元素长度等于前遍历的i值（这么做是为了防止index out of range）
                    #或者第j个元素的第i位不等于第一个元素的第i位
                    if len(strs[j])==i or strs[j][i] != c:
                        #如果此时只看了第一位，i=0，就证明list中的第j个元素的第一位就已经和第1个元素不match了
                        if i == 0:
                            #返回“”
                            return ""
                        else:
                            #若不满足，就返回第一个元素的从0到i位
                            return strs[0][:i]
            #注意这里不用再判断strs这个list是不是长度是1，因为如果长度是1自然不会进入到第二个for loop
            #所以直接在最外层的for loop返回唯一一个字符就行
            return strs[0]
#####################################################################################################################################
二分法解决这个问题
class Solution(object):
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        #二分算法求解
        #和直接竖向比较一样先定义一个返回的str_，同时检查是否输入list为空或者所有元素为“”，如果是就返回“”
        str_=""
        if len(strs) == 0 or not all(strs):
            return ""
        #先用sorted函数（自定义排序方法：key=lambda i:len(i)来按照strs中所有元素的长度排序）把strs重新排序
        strs=sorted(strs, key = lambda i:len(i), reverse = False)
        #选取strs中第一个元素即长度最短的元素，这样可以很大程度上简化二分的难度
        prefix = strs[0]
        #其实这个对于strs list第一个元素长度为一的判断是不是可以省略放在while loop里面检查？
        #如果第一个元素长度为1
        if len(prefix) == 1:
        #调用intheothers函数，判断这个唯一的元素是否是strs list中其他元素的开头
        #因为只有一位，所以直接判断是不是其他元素的开头即可，不用其他的逻辑来选择适当的idx
            if self.intheothers(prefix, strs):
                #如果是的话，因为prefix只有一位，直接返回他自己就行
                return prefix
                #如果不是的话返回str_，其实也就是返回“”，因为str_还没有被赋值
            else:
                return str_
        #其他情况，prefix（list第一位）长度不为1，也不为空
        else:
            #创建变量 idx 来指明二分的起始点，最先的起始点是prefix长度一半的位置
            idx=len(prefix)/2
            #只要指明二分点的idx不超过整个prefix的最后一位就可以一直分下去
            while idx<=len(strs[0]):
                #把prefix分成左右两个部分
                lh = prefix[:idx]
                rh = prefix[idx:]
                
                if self.intheothers(lh, strs):
                    str_ = lh
                #检查左半边是不是prefix
                if self.intheothers(lh, strs):
                #如果是，那左半边就赋值给str_
                    str_ = lh
                    #这个if是用来判断是否idx到了prefix的倒数第二位，如果是的话idx就不能再挪(len(prefix)-idx)/2位了，这样会返回0
                    if len(prefix)-idx <= 1:
                        #idx只挪一位，挪到最后一位
                        idx+=1
                        #改变lh值
                        lh = prefix[:idx]
                        #因为这时候已经到了prefix的最后一位，所以lh就应该等于prefix，只要这时lh是strs剩下元素的前缀，就赋值str_并返回
                        #这里多做一个这样的判断是因为不光要考虑lh是前缀的情况，还要考虑lh不是前缀，整个idx向左挪而不是向右挪的情况，这样保证
                        #当前缀在初次分开后的左半边的时候不会卡在while loop中出不来
                        if self.intheothers(lh, strs):
                            str_ = lh
                            return str_
                    #若不是prefix倒数第二位就移动(len(prefix)-idx)/2位
                    else:
                        idx+=(len(prefix)-idx)/2
                #如果lh不是strs中剩下的元素的前缀，就要对lh继续重新对半分，这样把lh值赋值给prefix，改变prefix重新返回while loop 迭代
                #但是要注意在重新分割后的prefix中右半边有字母不是前缀的情况，这样就需要进入之前的嵌套的if语句中返回值
                else:
                #赋值，并把idx变为prefix长度一半
                    prefix = lh
                    idx=len(prefix)/2
                
            return str_
        
    def intheothers(self, sub, strs):
            lis=[]
            #intheothers函数就用来检查当前lh是不是strs list中其他元素的开头，只有都是才返回True
            for i in range(1,len(strs)):
                if strs[i].startswith(sub):
                    lis.append(True)
                else:
                    lis.append(False)
            return all(lis)
      
